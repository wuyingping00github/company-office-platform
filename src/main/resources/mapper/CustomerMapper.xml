<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	nameSpace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离
	注意：使用MAPPER代理开发时，nameSpace有特殊且重要的作用
	两个文件通过mapper.xml文件中的 namespace形成映射。
 -->
<mapper namespace="company.office.dao.CustomerMapper">
    <resultMap id="customerMap" type="company.office.entity.Customer">
        <id column="customer_id"           property="customerId"           jdbcType="BIGINT" javaType="long"/>
        <result column="customer_name"     property="customerName"         jdbcType="VARCHAR" javaType="String"/>
        <result column="customer_birthday" property="customerBirthday"     jdbcType="DATE" javaType="Date"/>
        <result column="customer_password" property="customerPassword"     jdbcType="VARCHAR" javaType="String"/>
        <result column="customer_gender"   property="customerGender"       jdbcType="VARCHAR" javaType="String"/>
        <result column="customer_phone"    property="customerPhone"        jdbcType="BIGINT" javaType="long"/>
    </resultMap>
    
     <update id="createIfNotExistsTable" >
        CREATE TABLE IF NOT EXISTS customer (
        customer_id       BIGINT       AUTO_INCREMENT,
        customer_name     VARCHAR(128) NOT NULL,
        customer_birthday DATE         NOT NULL,
        customer_password VARCHAR(128) NOT NULL,
        customer_gender   VARCHAR(6)   NOT NULL,
        customer_phone    BIGINT       NOT NULL,
        PRIMARY KEY (customer_id)           )
    </update>

    <update id="truncateTable">
        TRUNCATE TABLE customer
    </update>

    <update id="dropTable">
        DROP TABLE IF EXISTS customer
    </update>
    <update id="update" parameterType="company.office.entity.Customer">
    UPDATE customer
    SET
    customer_name = #{customerName},
    customer_password = #{customerPassword},
    customer_gender = #{customerGender},
    customer_birthday = #{customerBirthday},
    customer_phone = #{customerPhone}
    WHERE
    customer_id = #{customerId}
    </update>

    <insert id="insert" useGeneratedKeys="true" keyProperty="customerId" parameterType="company.office.entity.Customer">
       <!-- 这是获取自增长的id值 ，一般用after，before可能失效 -->
       <selectKey keyProperty="customerId" resultType="long" order="AFTER">
       SELECT LAST_INSERT_ID()
       </selectKey>
        INSERT INTO
        customer (
          customer_name,customer_password,
          customer_birthday,
          customer_gender,customer_phone
        )
        VALUES (
        #{customerId},
        #{customerName},
        #{customerBirthday}
        #{customerPassword},
        #{customerGender},
        #{customerPhone}
               )
    </insert>

    <delete id="delete">
        DELETE FROM
        customer
        WHERE
        customer_id = #{customerId}
    </delete>

    <!-- 查询所有信息 -->
    <select id="selectAll" resultMap="customerMap">
        SELECT
        *
        FROM
        customer
    </select>
</mapper>