<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	nameSpace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离
	注意：使用MAPPER代理开发时，nameSpace有特殊且重要的作用
	两个文件通过mapper.xml文件中的 namespace 形成映射。
 -->
<mapper namespace="company.office.mapper.CustomerMapper">

    <resultMap id="customerMap" type="company.office.entity.Customer">
        <id column="customer_id"           property="customerId"       javaType="long"     jdbcType="BIGINT"/>
        <result column="customer_name"     property="customerName"     javaType="String"   jdbcType="VARCHAR"/>
        <result column="customer_birthday" property="customerBirthday" javaType="Date"     jdbcType="DATE"/>
        <result column="customer_password" property="customerPassword" javaType="String"   jdbcType="VARCHAR"/>
        <result column="customer_gender"   property="customerGender"   javaType="String"   jdbcType="VARCHAR"/>
        <result column="customer_phone"    property="customerPhone"    javaType="long"     jdbcType="BIGINT"/>
    <collection property="harvestList" ofType="company.office.entity.HarvestInfo">
        <id     column="harvest_id"        property="harvestId"      javaType="long"    jdbcType="BIGINT"/>
        <result column="customer_id"       property="customerId"     javaType="long"    jdbcType="BIGINT"/>
        <result column="Harvest_Address"   property="harvestAddress" javaType="String"  jdbcType="VARCHAR"/>
        <result column="Harvest_Phone"     property="HarvestPhone"   javaType="long"    jdbcType="BIGINT"/>
        </collection>
    </resultMap>
    
     <update id="createIfNotExistsTable">
        CREATE TABLE IF NOT EXISTS customer (
        customer_id       BIGINT       AUTO_INCREMENT,
        customer_name     VARCHAR(128) NOT NULL,
        customer_birthday DATE         NOT NULL,
        customer_password VARCHAR(128) NOT NULL, 
        customer_gender   VARCHAR(6)   NOT NULL,
        customer_phone    BIGINT       NOT NULL, 
        PRIMARY KEY (customer_id))
    </update>

    <update id="truncateTable">
        TRUNCATE TABLE customer
    </update>

    <update id="dropTable">
        DROP TABLE IF EXISTS customer
    </update>
    <update id="update" parameterType="company.office.entity.Customer">
    UPDATE customer 
    SET 
    customer_name = #{customerName,jdbctype="VARCHAR"},
    customer_password = #{customerPassword,jdbctype="VARCHAR"},
    customer_gender = #{customerGender,jdbctype="VARCHAR"},
    customer_birthday = #{customerBirthday,jdbctype="DATE"},
    customer_phone = #{customerPhone,jdbctype="BIGINT"}
    WHERE 
    customer_id = #{customerId,jdbctype="BIGINT"}
    </update>

    <insert id="insert" useGeneratedKeys="true" keyProperty="customerId" parameterType="company.office.entity.Customer">
       <!-- 这是获取自增长的id值 ，一般用after，before可能失效 -->
       <selectKey keyProperty="customerId" resultType="BIGINT" order="AFTER">
       SELECT LAST_INSERT_ID()
       </selectKey>
        INSERT INTO 
        customer (
          customer_name,customer_password,
          customer_birthday,
          customer_gender,customer_phone
        )
        VALUES (
        #{customerId,jdbcType="BIGINT"},
        #{customerName,jdbcType="VARCHAR"},
        #{customerBirthday,jdbcType="DATE"}
        #{customerPassword,jdbcType="VARCHAR"},
        #{customerGender,jdbcType="VARCHAR"},
        #{customerPhone,jdbcType="BIGINT"}
               )
    </insert>

    <delete id="delete">
        DELETE FROM 
        customer 
        WHERE 
        customerId = #{customerId,jdbcType="BIGINT"}
    </delete>

    <!-- 查询所有信息 -->
    <select id="selectAll" resultMap="customerMap">
        SELECT
        *
        FROM
        customer   
    </select>
</mapper>